===============================================================================
                            NOVA OS - WORKSHOP B3
                        Syst√®me d'Exploitation √âducatif
===============================================================================

üìã INFORMATIONS G√âN√âRALES
===============================================================================
Nom du projet     : NOVA OS
Version           : 2.0
Type              : Syst√®me d'exploitation √©ducatif x86
Contexte          : WORKSHOP B3
Langage principal : C + Assembleur

üë• √âQUIPE DE D√âVELOPPEMENT
===============================================================================
- FERLIN Gwendal
- CREPEL Adrien
- CARON Timoth√©e
- BECQUIN Lilian

üéØ DESCRIPTION DU PROJET
===============================================================================
NOVA OS est un syst√®me d'exploitation minimaliste d√©velopp√© from scratch pour
l'apprentissage des concepts fondamentaux des OS. Il impl√©mente :

‚úÖ Kernel 32-bit avec bootloader GRUB
‚úÖ Gestion des interruptions (IDT) et descripteurs (GDT)
‚úÖ Interface terminal avec shell interactif
‚úÖ Support clavier AZERTY + navigation fl√®ches
‚úÖ Syst√®me de commandes avec historique
‚úÖ Applications int√©gr√©es (jeux, √©diteur, outils)
‚úÖ Gestion m√©moire de base
‚úÖ Syst√®me de fichiers virtuel
‚úÖ Interface color√©e VGA

üöÄ FONCTIONNALIT√âS PRINCIPALES
===============================================================================

üñ•Ô∏è  SYST√àME DE BASE
    ‚Ä¢ Boot via GRUB avec logo NOVA ASCII
    ‚Ä¢ Shell interactif avec prompt color√©
    ‚Ä¢ Historique des commandes (fl√®ches ‚Üë‚Üì)
    ‚Ä¢ D√©filement automatique de l'√©cran
    ‚Ä¢ Gestion robuste des erreurs

üéÆ  APPLICATIONS & JEUX
    ‚Ä¢ Snake - Jeu classique avec high scores
    ‚Ä¢ Pong - Tennis de table r√©tro
    ‚Ä¢ Blackjack - Jeu de cartes contre l'IA
    ‚Ä¢ Calculatrice - Op√©rations math√©matiques

üõ†Ô∏è  OUTILS SYST√àME
    ‚Ä¢ √âditeur de texte - Interface compl√®te avec raccourcis
    ‚Ä¢ Gestionnaire de fichiers - Navigation et op√©rations
    ‚Ä¢ Moniteur syst√®me - CPU, m√©moire, sant√©
    ‚Ä¢ Wiki int√©gr√© - Documentation interactive
    ‚Ä¢ Syst√®me de messagerie - Communication utilisateurs
    ‚Ä¢ Gestionnaire de mots de passe - S√©curit√©

üìä  STATISTIQUES DU CODE
===============================================================================
Lignes de code    : ~7000+ lignes
Fichiers source   : 23 fichiers (.c + .h)
Applications      : 6 programmes int√©gr√©s
Modules syst√®me   : 8 composants (clavier, timer, m√©moire, etc.)
Assembleur        : 3 fichiers (.s) pour boot et interruptions

‚öôÔ∏è  PR√âREQUIS SYST√àME
===============================================================================
D√âVELOPPEMENT :
‚Ä¢ GCC cross-compiler (x86_64-elf-gcc) OU gcc natif
‚Ä¢ NASM (assembleur)
‚Ä¢ Make
‚Ä¢ GRUB tools (grub-mkrescue, xorriso)
‚Ä¢ Docker (optionnel, pour environnement isol√©)

EX√âCUTION :
‚Ä¢ QEMU (√©mulateur recommand√©)
‚Ä¢ Machine physique x86 compatible (optionnel)
‚Ä¢ 512 MB RAM minimum
‚Ä¢ Support VGA

üîß COMPILATION ET INSTALLATION
===============================================================================

1. INSTALLATION DES OUTILS (Ubuntu/Debian) :
   sudo apt update
   sudo apt install build-essential nasm gcc-multilib grub-pc-bin xorriso qemu-system-x86

2. COMPILATION AUTOMATIQUE :
   make                    # Compilation compl√®te
   make info              # V√©rifier la toolchain d√©tect√©e
   make install-toolchain # Installer les outils manquants

3. ALTERNATIVES DE COMPILATION :
   make build-native      # Forcer gcc natif
   make install-grub      # Installer uniquement GRUB

4. NETTOYAGE :
   make clean             # Supprimer fichiers temporaires

‚ñ∂Ô∏è  EX√âCUTION
===============================================================================

üñ•Ô∏è  DANS QEMU (RECOMMAND√â) :
   make run               # Lancement standard
   make run-power         # Plus de ressources
   make run-windows       # Optimis√© Windows (WHPX)
   make run-mac           # Optimis√© macOS (HVF)

üêõ  D√âBOGAGE :
   make debug             # Mode d√©bogage GDB

üíø  SUR MACHINE PHYSIQUE :
   1. Graver myos.iso sur USB/CD
   2. Booter depuis le support
   3. S√©lectionner "NOVA" dans GRUB

üéÆ GUIDE D'UTILISATION
===============================================================================

COMMANDES PRINCIPALES :
  help          - Afficher l'aide compl√®te
  apps          - Liste des applications
  snake         - Lancer Snake
  pong          - Lancer Pong
  blackjack     - Lancer Blackjack
  calc          - Calculatrice
  edit          - √âditeur de texte
  files         - Gestionnaire de fichiers
  health        - Moniteur syst√®me
  wiki          - Documentation
  messaging     - Syst√®me de messages
  passwd        - Gestion des mots de passe
  charset       - Caract√®res disponibles
  colors        - Test des couleurs
  clear         - Effacer l'√©cran
  reboot        - Red√©marrer le syst√®me

NAVIGATION :
‚Ä¢ ‚Üë‚Üì : Historique des commandes
‚Ä¢ ‚Üê‚Üí : Navigation dans la ligne
‚Ä¢ Tab : Auto-compl√©tion (si impl√©ment√©e)
‚Ä¢ ESC : Quitter les applications

üèóÔ∏è  ARCHITECTURE TECHNIQUE
===============================================================================

STRUCTURE DES MODULES :
‚îú‚îÄ‚îÄ kernel.c          - C≈ìur syst√®me + shell
‚îú‚îÄ‚îÄ boot.s           - Bootloader assembleur
‚îú‚îÄ‚îÄ gdt.c/idt.c      - Tables de descripteurs
‚îú‚îÄ‚îÄ keyboard.c       - Driver clavier AZERTY
‚îú‚îÄ‚îÄ timer.c          - Gestion du temps
‚îú‚îÄ‚îÄ memory.c         - Allocateur m√©moire
‚îú‚îÄ‚îÄ io.c             - Entr√©es/sorties bas niveau
‚îú‚îÄ‚îÄ game.c           - Moteur de jeux
‚îú‚îÄ‚îÄ editor.c         - √âditeur de texte
‚îú‚îÄ‚îÄ filemanager.c    - Syst√®me de fichiers
‚îú‚îÄ‚îÄ messaging.c      - Communication
‚îî‚îÄ‚îÄ wiki.c           - Base de connaissances

COMPILATION CROSS-PLATFORM :
‚Ä¢ D√©tection automatique OS (Windows/Linux/macOS)
‚Ä¢ Support Docker pour isolation
‚Ä¢ Fallback gcc natif si cross-compiler absent
‚Ä¢ Scripts de build intelligents

üî¨ CONCEPTS TECHNIQUES IMPL√âMENT√âS
===============================================================================
‚Ä¢ Global Descriptor Table (GDT)
‚Ä¢ Interrupt Descriptor Table (IDT)
‚Ä¢ Gestion des exceptions CPU
‚Ä¢ Timer programmable (PIT)
‚Ä¢ Contr√¥leur d'interruptions (PIC)
‚Ä¢ Mode texte VGA color√©
‚Ä¢ Allocation m√©moire statique
‚Ä¢ √âtat de processus basique
‚Ä¢ Interface utilisateur en mode texte

üêõ D√âBOGAGE ET TESTS
===============================================================================
‚Ä¢ Mode d√©bogage GDB int√©gr√©
‚Ä¢ Protection contre buffer overflow
‚Ä¢ Gestion d'erreurs robuste
‚Ä¢ Tests de stress m√©moire
‚Ä¢ Validation des entr√©es utilisateur
‚Ä¢ Logs syst√®me int√©gr√©s

üìö RESSOURCES ET R√âF√âRENCES
===============================================================================
‚Ä¢ OSDev Wiki : https://wiki.osdev.org
‚Ä¢ Intel Software Developer Manual
‚Ä¢ Documentation GRUB
‚Ä¢ Sp√©cifications VGA
‚Ä¢ Standards x86 Assembly

üö® PROBL√àMES CONNUS
===============================================================================
‚Ä¢ Syst√®me de fichiers en lecture seule
‚Ä¢ Pas de multit√¢che pr√©emptif
‚Ä¢ Gestion m√©moire limit√©e
‚Ä¢ Support r√©seau non impl√©ment√©
‚Ä¢ Audio non support√©

üîÆ AM√âLIORATIONS FUTURES
===============================================================================
‚Ä¢ Multit√¢che coop√©ratif
‚Ä¢ Syst√®me de fichiers complet
‚Ä¢ Support USB
‚Ä¢ Interface graphique basique
‚Ä¢ R√©seau TCP/IP simple
‚Ä¢ Son PC Speaker

üìÑ LICENCE ET CR√âDITS
===============================================================================
Projet √©ducatif d√©velopp√© dans le cadre du WORKSHOP B3.
Code source libre pour usage acad√©mique.

¬© 2025 - √âquipe NOVA OS - WORKSHOP B3

Pour plus d'informations ou support, consultez le wiki int√©gr√©
ou contactez l'√©quipe de d√©veloppement.

